<?php
/**
 * Created by PhpStorm.
 * User: tony
 * Date: 2018/7/5
 * Time: 11:26
 */

namespace app\api\controller;

//use think\Controller;
//use think\Cookie;
//use think\Log;

//use app\user\model\UserModel;
use think\Controller;
use app\portal\model\UserModel;
use token\Token;

class ProxyController extends Controller
{
    //定义cookie名称
    const TEARCHER_TOKEN = 'mooc_tearcher_token';
    const TEARCHER_SALT = 'mooc_tearcher_salt';
    const STUDNENT_TOKEN = 'mooc_user_token';
    const STUDNENT_SALT = 'mooc_user_salt';
    const ADMIN_TOKEN = 'mooc_center_token';
    const ADMIN_SALT = 'mooc_center_salt';
    const CENTER_ID = 'mooc_center_id';
    const USER_TYPE = 'user_type';

    public $center_token = '';
    public $center_salt = '';

//    protected function _initialize()
//    {
//        parent::_initialize(); // TODO: Change the autogenerated stub
//    }

    public function index()
    {
        //确认请求的接口
        $api = input('api', '', 'urldecode');
        $apiArr = explode('/', $api);
        if (count($apiArr) != 4) {
            return $this->_fail('1001', '指定的api参数异常', 1);
        }

        //获取所有请求参数
        $payload = $this->request->param();

        //生成身份信息
        $payload['timestamp'] = time();
        //生成请求数据
        $user_type = input('user_type', 0);
        $sign_url = strtolower($apiArr[1] . '/' . str_replace('_', '', $apiArr[2]) . '/' . $apiArr[3]);
        if ($user_type == 2) {
            //老师
            $payload['user_token'] = cookie(self::TEARCHER_TOKEN);
            $salt = cookie(self::TEARCHER_SALT);
            $payload['sign'] = $this->_encrypt_key([$payload['user_token'], $salt, $payload['timestamp'], $sign_url], '');
        } else if ($user_type == 3) {
            //后台
            $payload['center_token'] = cookie(self::ADMIN_TOKEN);
            $salt = cookie(self::ADMIN_SALT);
            $payload['sign'] = $this->_encrypt_key([$payload['center_token'], $salt, $payload['timestamp'], $sign_url], '');
        } else if($user_type === 1){
            //学生
            $payload['user_token'] = cookie(self::STUDNENT_TOKEN);
            $salt = cookie(self::STUDNENT_SALT);
            $payload['sign'] = $this->_encrypt_key([$payload['user_token'], $salt, $payload['timestamp'], $sign_url], '');
        }else{
            $payload['center_id'] =  config('proxy.center_id');
        }

        //请求
        $method = input('param.method', 'get');
        $url = config('proxy.host') . '/' . $apiArr[1] . '/' . $apiArr[2] . '/' . $apiArr[3];
        unset($payload['user_type']);
        unset($payload['method']);
        unset($payload['api']);
        if($api == '/v1/upload/upload'){
            return ok($payload, 80102, '获取上传token成功');
        }

        $response = $this->_https($url, $payload, $method);
        return $response;
    }

    public function get_upload_token(){
        return ok('24332242343', 80101, '获取令牌成功');
    }

    //客户端需要实现获取当前用户ID的方法
    private function _get_user()
    {

        return $user=['id'=>2,'nick_name'=>'ksdjfadjfsk'];
    }

    //客户端需要实现获取当前用户昵称的方法
    private function _get_nick_name($user_id)
    {
        return (new UserModel())->where(['id'=>$user_id])->value('user_nickname');
    }

    //用户自动登陆
    public function user_login()
    {
        $this->check_sign();
        $payload = ['timestamp' => time()];
        $user_id = Token::get_user_id($this->request->param('token'));
        $payload['center_user_id'] = $user_id;
        $payload['nick_name'] = $this->_get_nick_name($user_id);
        $payload['center_id'] = config('proxy.center_id');
        $payload['sign'] = $this->_bulid_login_sign([$payload['center_user_id']], $payload['timestamp']);
        if($this->isMobile()){
            //移动端登陆
            $payload['terminal'] = 2;
        }else{
            //PC端登陆
            $payload['terminal'] = 1;
        }
        $url = config('proxy.host') . '/v1/passport/user_login';
        $response = $this->_https($url, $payload, 'post');
        if ($response['status'] == 1) {
            //登陆成功
            cookie(self::STUDNENT_TOKEN, $response['data']['user_token'], $response['data']['expire_time']);
            cookie(self::STUDNENT_SALT, $response['data']['salt'], $response['data']['expire_time']);
            cookie(self::USER_TYPE, 1, $response['data']['expire_time']);
            return $this->_ok('', 1101, '登陆成功');
        } else {
            return $response;
        }
    }

    //场馆自动登陆
    public function center_login()
    {
        $payload = ['timestamp' => time()];
        $payload['center_id'] = config('proxy.center_id');
        $payload['sign'] = $this->_bulid_login_sign([], $payload['timestamp']);
        if($this->isMobile()){
            //移动端登陆
            $payload['terminal'] = 2;
        }else{
            //PC端登陆
            $payload['terminal'] = 1;
        }
        $url = config('proxy.host') . '/v1/passport/center_login';
        $response = $this->_https($url, $payload, 'post');
        if ($response['status'] == 1) {
            //登陆成功
            cookie(self::ADMIN_TOKEN, $response['data']['center_token'], $response['data']['expire_time']);
            cookie(self::ADMIN_SALT, $response['data']['salt'], $response['data']['expire_time']);
            cookie(self::USET_TYPE, 3, $response['data']['expire_time']);
            return $this->_ok('', 1102, '登陆成功');
        } else {
            return $response;
        }
    }

    //老师登陆
    public function pass_login()
    {
//        var_dump($this);die;
        $payload['user_login'] = $this->request->param('user_login', '');

        $payload['user_pass'] = $this->request->param('user_pass', '');
        $payload['center_id'] = config('proxy.center_id');
        $payload['mode'] = $this->request->param('mode', 2);
        if($this->isMobile()){
            //移动端登陆
            $payload['terminal'] = 2;
        }else{
            //PC端登陆
            $payload['terminal'] = 1;
        }
        $url = config('proxy.host') . '/v1/passport/pass_login';
//        $response = $this->_https($url, $payload, 'post');
//        if($response['status'] == 1){
//            $response['data']['center_id'] = config('proxy.center_id');
//            if($payload['mode'] != 2){
//                session('center_token',$response['data']['token']);
//                session('center_salt',$response['data']['salt']);
//            }
//        }
//        return $response;
        $response = $this->_https($url, $payload, 'post');
        if ($response['status'] == 1) {
            //登陆成功
            if($payload['mode'] == 2){
                //老师登陆
                cookie(self::TEARCHER_TOKEN, $response['data']['token'], $response['data']['expire_time']);
                cookie(self::TEARCHER_SALT, $response['data']['salt'], $response['data']['expire_time']);
            }else{
                //超级管理员
                cookie(self::ADMIN_TOKEN, $response['data']['token'], $response['data']['expire_time']);
                cookie(self::ADMIN_SALT, $response['data']['salt'], $response['data']['expire_time']);
            }
            return $this->_ok($response, 1102, '登陆成功');
        } else {
            return $response;
        }
    }

    private function isMobile()
    {
        // 如果有HTTP_X_WAP_PROFILE则一定是移动设备
        if (isset ($_SERVER['HTTP_X_WAP_PROFILE']))
        {
            return true;
        }
        // 如果via信息含有wap则一定是移动设备,部分服务商会屏蔽该信息
        if (isset ($_SERVER['HTTP_VIA']))
        {
            // 找不到为flase,否则为true
            return stristr($_SERVER['HTTP_VIA'], "wap") ? true : false;
        }
        // 脑残法，判断手机发送的客户端标志,兼容性有待提高
        if (isset ($_SERVER['HTTP_USER_AGENT']))
        {
            $clientkeywords = array ('nokia',
                'sony',
                'ericsson',
                'mot',
                'samsung',
                'htc',
                'sgh',
                'lg',
                'sharp',
                'sie-',
                'philips',
                'panasonic',
                'alcatel',
                'lenovo',
                'iphone',
                'ipod',
                'blackberry',
                'meizu',
                'android',
                'netfront',
                'symbian',
                'ucweb',
                'windowsce',
                'palm',
                'operamini',
                'operamobi',
                'openwave',
                'nexusone',
                'cldc',
                'midp',
                'wap',
                'mobile'
            );
            // 从HTTP_USER_AGENT中查找手机浏览器的关键字
            if (preg_match("/(" . implode('|', $clientkeywords) . ")/i", strtolower($_SERVER['HTTP_USER_AGENT'])))
            {
                return true;
            }
        }
        // 协议法，因为有可能不准确，放到最后判断
        if (isset ($_SERVER['HTTP_ACCEPT']))
        {
            // 如果只支持wml并且不支持html那一定是移动设备
            // 如果支持wml和html但是wml在html之前则是移动设备
            if ((strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') !== false) && (strpos($_SERVER['HTTP_ACCEPT'], 'text/html') === false || (strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') < strpos($_SERVER['HTTP_ACCEPT'], 'text/html'))))
            {
                return true;
            }
        }
        return false;
    }


    private function _bulid_login_sign($sign_data, $timestamp)
    {
        $sign_data['center_id'] = config('proxy.center_id');
        $access_key = config('proxy.access_key');
        $sign_data['timestamp'] = $timestamp;
        return $this->_encrypt_key($sign_data, $access_key);
    }

    // 应用公共文件
    private function _encrypt_key($data, $key)
    {
        sort($data, SORT_STRING);
        return md5(implode('', $data) . $key);
    }

    private function _ok($data, $code, $msg)
    {
        $data = array(
            'status' => 1,
            'code' => $code,
            'data' => $data,
            'msg' => $msg
        );
        return json($data);
    }

    private function _fail($code, $msg)
    {
        $data = array(
            'status' => 0,
            'code' => $code,
            'data' => [],
            'msg' => $msg
        );

        return json($data);
    }

    /**
     * 发送https get请求
     */
    private function _https($url, $payload, $method = 'get')
    {
//        var_dump($payload);
//        file_put_contents('/data/www/chaoxingwhg/public/test.log',json_encode($payload),FILE_APPEND);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        if ($method == 'post') {
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_HEADER, 0);
        }

        curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect: '));
        curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);
        curl_setopt($ch, CURLOPT_ENCODING, "gzip");
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($payload));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // 对认证证书来源的检查
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); //
        $output = curl_exec($ch);
        if (curl_errno($ch)) {
            $msg = curl_error($ch);
            curl_close($ch);
            return ['status' => 0, 'code' => 1002, 'msg' => $msg];
        } else {
            curl_close($ch);
            $res = json_decode($output, true);
            if(empty($res)){
                return $output;
            }else{
                return $res;
            }
        }
    }
}
